%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.15.1 (Build 19B88) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 8192 2048
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 8192 2048
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: ZHJCFJ+Avenir-Black
%!FontType1-1.0: ZHJCFJ+Avenir-Black 1.0000.1.0000
/FontInfo 1 dict dup begin
/FSType 4 def
end readonly def
14 dict begin
/FontName /ZHJCFJ+Avenir-Black def
/PaintType 0 def
/Encoding 256 array 0 1 255 {1 index exch/.notdef put} for
dup 33 /l put
dup 34 /i put
dup 35 /space put
dup 36 /e put
dup 37 /s put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[1000 -516 1 index div -457 2 index div 1522 3 index div 1205 5 -1 roll div]cvx def
/sfnts [<


3E59B800004558B800022F1BB9000200083E59B8000710B9000D0004FC41070008000D0018000D0028000D00035D3031133311230334363332161514062322263796960C332424333324243301E6FE1A027F2433332424333300000000010037000000CD02F400030026BB00010005000000042BB8000110B80005DC00B800004558B800022F1BB9000200083E5930311333112337969602F4FD0C0000010018FFF401B701F2002A00A5B8002B2FB8002C2FB8002B10B80022D0B800222FB900050005FC410700060005001600050026000500035DB8002C10B8000CDCB9001B0005FC41070009001B0019001B0029001B00035D00B800004558B800272F1BB90027000C3E59B800004558B800112F1BB9001100083E59B8002710B900020003FC410700080002001800020028000200035DB8001110B900180003FC410700070018001700180027001800035D3031012623220615141E0415140E0223222627371E0133323635342E0435343E02333216170148213613242539413925294050273368245B1533221A2A253941392523394A26306222015729121612110D0F20372E2F3D250F1D25651A1B0F1413130D0F1E372E2B3E28131C2400000001FEC100B7023901890007003BB800142BB800082FB800032FB8000810B80006D0B800062FB80001DCB8000310B80004DCB80009DC00B800002FB800032FB80006DCB80001DC30310315253533170527E502C35A01FC890101885A015AD101D1000000000100000001000033BD619D5F0F3CF5001903E800000000C2575A6D00000000D57795ECFDFCFE3705F204B50001000900020000000000000001000003E8FE9200000638FDFCFEC105F20001000000000000000000000000000000070200000001280000023E00260104002B0104003701CF00180128FEC1000000B200B20138019A01BA024A027C0001000000070064000700670007000100000000001E00000200044800040001B800142BB8000A2B01BA00050014000C2B01BF00150025001F00190012000C000000122BBF0016003300260020001A000C000000122BBF00170028001F00190012000C000000122BBF00180022001F00190012000C000000122B00BF0011002A002600190012000C000000122BBF0012003E00320027001A0011000000122BBF0013002E002600200012000C000000122BBF00140027001F00190012000C000000122B00BA0019000400112BB8001020457D691844B800002B00BA0001000400022B01BA0005000300022B01BE00050025001E00190012000C00082BBE0006003300260020001A000C00082BBE00070022001E00190012000C00082B00BE0001002A002600190012000C00082BBE0002003E00320027001A001100082BBE0003002E002600200012000C00082BBE00040027001E00190012
000C00082B00BA0008000400072BB8000020457D69184400
00>] def
/CharStrings 7 dict dup begin
/.notdef 0 def
/space 1 def
/e 2 def
/i 3 def
/l 4 def
/s 5 def
/uniFE48 6 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontInfo 1 dict dup begin
/FSType 4 def
end readonly def
/FontType 1 def
/FontMatrix [ 0.001 0 0 0.001 0 0 ] readonly def
/FontBBox {-516 -457 1522 1205} readonly def
/UniqueID 4352669 def
currentdict end
currentfile eexec
54544758EC884CF30C3CD503CEDBFF3839C47C3C3333173232E3FDBFF439491DB843E1924E63AA7726BBB0485AB56D93D8C0906F647A47162891E73FFC2A9873C4B1EAC5EEBDFFC4D06084FBD84139DF4583C6E259D10699944D1068C9C45667DCCCFB9B7EA01B606435EDCBD273ABAC093D14085CCBAC149BD7382E842CFE0D7FE4FD2EF589A2471F6074A80A8B675C2F7A50D63AC1EF90D787BADD11633CB01CF6EE3B37AAF9078A69AC4740E9B6525D78BBD839551A1CB80DB8682FA5E87591BBD6EE8B946063A2A58D9CA3685AB305495DC5FB5747EB8A9A059C4976C0FE4EEAB1D56FF47F1E9664ED9F4A7DAB763AF92B2F6CF2FA7DEC24710E0B9096E30F772BA7FEA9BDBE496C42ED2CEB58F54E80BDF57CE7B4DB6CCFE7182F43BF93CCA0767AF95D62C5D2C3DC6AE1E6D139F51A2C63432117F1714C5566572EE9967A715420ABDCD1D7BD74F8450B89965FCC81C6ACA565C5F3CCF91D430D1F953E4F1A645300A98DD8C47CD64555F08F422340A85404EAE0D3229C4F9336B9470CACBD6BBF3395104750A915CC6EAAC197668267B8C62D2764C8CD69FD937CA3C924D997A0EDE7964BEB9EA2F92EF70C5E5DA0AA55675454E59AEC12A68086DDD95476477C46AE143377694529C58844212FC811560E27EEE2CF00BCB2841D4E2A5F3E00796201973F6D284AC32836A38BF7BF5AD47553F107557109806DBAF459B8F6381748DBE93394E754E3088707935014E804BA84AB2118CE7582A474A1170FE48CB1C68E720DE5165BF201F1BDA7881B08FDFAD74FD8672416904BEFA27F31B36E615BB64068DD73BC9A16030F2ECA65229CF4FCB56C88CC93205A28C800641B8E774AFFFF47B6952071E52324F7E7AA55519F49F127293318D40566C305915F2F33448A662BF85BFC9A9C57DF13EE349E10991CD13BF7F077A1DA24F8769CB55512CBD143B0FCB7001874AC5DDAC777CC7C0FD12E81A74D93B360F44DE3CEAB436D9688B1616BDDAA3B58512C89C0AAE866232FCCDA3CBA52FA22A5D82FE491A7112725CD738A9A11A9BD5324BF25314B55E3EA18E0454BFAB1A9F50950F47AE07C5569D045953F8581FA9780DF5549CA95C28D0772D0B6E7E09DCC6981E4380F832C5511BB58C042CDDBA87D380A820F1EEC0787D01A3BA44EF5EBD30A8F12284B480A5808CA029265A7639EBC24D2509A0629DBB9D144FF2517EBE68571D7B663D4F181011E33BDA862AC21B518921ED91FCD1AE4C80B53BC6D34F4D6AFA0A0E34D7D852D807B5B0692874D3113202D27297588692A367F4976FD7235B97D371CE72E35E51A45EEA190B958BF1AA1E4C222446AE6121E64B3FB37DC70C66947810324B1C031A76D7FB2E4E2E25786BD53031F1736D045852CA6FF6551C2CA0FA1958D69B24C9019B14A26296A50BEE2457F90D3D725E0DD15372FF91A
B7894A55409F7E65106A78ADF75F2B04E91019BEA80530A9466CE7FF92F6FC5E3FB786E494BED5E77E6FB62B6827C7A01FF4363FD37BD11CFDA8D54DCEFC2EF699A700CD623565B8B79A735F23232F787F2A06956E895A937506C90B9326375F43871653DC5638B7AE05BDB67D721082B1203A0EB8DCC542A6D0DC59B337A12FE472E994A72756D0D4C552DB46EC45D636EEBC67DD6818A8B22656CB45C3BB10CC984D72F259226DDC1E64BF8767044CDCFC83F4599AB9F4010840BFC0EBA442C50FCE5B792DED29C5B1C2EE1CAE3E0910B859C2EDA0989331C3F735B2F78590451DA36ABCA6B9FC26E39516D38433E788BEE0EDDD786C7CEE72E3B9FD8179AB8CB9753E27D703461744F93A8E58235D670E1C1C4FFF59C0B9AB3298CF3C2C9D3B672EFD5420F6BA4E6132D1A36A14E004D3CDA2D762EA39F9A098FFCFA0EACE76391D4249BA61E396BF0C2E2AD0BAF7CEC8985098C385843777459195270FFF8DCF4959588BE91ACD26AA8A3FF83AB93C1E1A1652E50D14B4F311B151FD6AEE6EF288E35CE1E7C684ACD00CD37303BDE672F91583E7F33A2F9786B564FAFDB8B2F6BB8257A215687B5076C149B5D80570
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/ZHJCFJ+Avenir-Black cguidfix
/F1.1/ZHJCFJ+Avenir-Black renmfont
%RBIBeginFontSubset: KMELVB+Avenir-Heavy
%!FontType1-1.0: KMELVB+Avenir-Heavy 1.0000.1.0000
/FontInfo 1 dict dup begin
/FSType 4 def
end readonly def
14 dict begin
/FontName /KMELVB+Avenir-Heavy def
/PaintType 0 def
/Encoding 256 array 0 1 255 {1 index exch/.notdef put} for
dup 33 /l put
dup 34 /i put
dup 35 /space put
dup 36 /e put
dup 37 /s put
dup 38 /L put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[1000 -450 1 index div -434 2 index div 1425 3 index div 1126 5 -1 roll div]cvx def
/sfnts [<



11220C1D13261C4E48040000FFFF0044FFF4029802BF02260008000000070007017BFFFB000100000001000093E60A445F0F3CF5001903E800000000C2576E9900000000D57795F1FE3EFE4E059104660001000900020000000000000001000003E8FE92000005DDFE3EFEB8059100010000000000000000000000000000000A02000000012800000207004F023E002C010400350104004601BC00190000FEFC02B9004402B900440000009E009E00C8014E01B801D4027602B803660372000000010000000A00640007005F0007000100000000001E00000200044800040001B800142B01BA0003002200162B01BF0020002E002A00210013000D0000001C2BBF0021004200340029001B00110000001C2BBF00220036002A0021001B000D0000001C2BBF0023002A002100190013000D0000001C2BBF00240024002100190013000D0000001C2B00BF001E0033002A0021001B000D0000001C2BBF001F003E00340029001B00110000001C2B00BA00250004001B2BB8001D20457D691844B8000A2B01BA00030012000C2B01BF0011002E002600210013000D000000122BBF0012003600300021001A000D000000122BBF0013002A002600190013000D000000122BBF00140023001D00190013000D000000122B00BF000F003300260021001A000D000000122BBF0010003E00300027001A0011000000122B00BA0015000400112BB8000E20457D691844B800002B00BA0001000200022B01BA0003000300022B01BE0003002E0026001E0016000E00082BBE00040036002E00240016000E00082BBE0005002A0026001E0016000E00082B00BE000100330026001E0016000E00082BBE0002003A002E0024001B000E00082B00BA0006000400072BB8000020457D6918440000
00>] def
/CharStrings 10 dict dup begin
/.notdef 0 def
/space 1 def
/L 2 def
/e 3 def
/i 4 def
/l 5 def
/s 6 def
/brevecmb 7 def
/uhorn 8 def
/uhornbreve 9 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontInfo 1 dict dup begin
/FSType 4 def
end readonly def
/FontType 1 def
/FontMatrix [ 0.001 0 0 0.001 0 0 ] readonly def
/FontBBox {-450 -434 1425 1126} readonly def
/UniqueID 4395844 def
currentdict end
currentfile eexec
54544758EC884CF30C3CD503CEDBFF3839C47C3C3333173232E3FDBFF439491DB843E1924E63AA7726BBB0485AB56D93D8C0906F647A47162891E73FFC2A9873C4B1EAC5EEBDFFC4D06084FBD84139DF4583C6E259D10699944D1068C9C45667DCCCFB9B7EA01B606435EDCBD273ABAC093D14085CCBAC149BD7382E842CFE0D7FE4FD2EF589A2471F6074A80A8B675C2F7A50D63AC1EF90D787BADD11633CB01CF6EE3B37AAF9078A69AC4740E9B6525D78BBD839551A1CB80DB8682FA5E87591BBD6EE8B946063A2A58D9CA3685AB305495DC5FB5747EB8A9A059C4976C0FE4EEAB1D56FF47F1E9664ED9F4A7DAB763AF92B2F6CF2FA7DEC24710E0B9096E30F772BA7FEA9BDBE496C42ED2CEB58F54E80BDF57CE7B4DB6CCFE7182F43BF93CCA0767AF95D62C5D2C3DC6AE1E6D139F51A2C63432117F1714C5566572EE9967A715420ABDCD1D7BD74F8450B89965FCC81C6ACA565C5F3CCF91D430D1F953E4F1A645300A98DD8C47CD64555F08F422340A85404EAE0D3229C4F9336B9470CACBD6BBF3395104750A915CC6EAAC197668267B8C62D2764C8CD69FD937CA3C924D997A0EDE7964BEB9EA2F92EF70C5E5DA0AA55675454E59AEC12A68263D9BC79CC22555FC30C8CC45F09AF69A11ED37EA2280D50916BB0100159B12E2182DB5914AF1D78B98DC14776AC39AF5CAD1DA768D70A2990845B6655DA522B341851732A1889FA7651B7944837578FE56C16DCFC1E9AFFAF4C084F68CA1024D80DC8DA019C9432AFE76762E7B51EC3723BA885BC9D6D78B9B34FAD1D4135279B995942ABAD55923D2719AAD0990A8ECA21124D2ED42E4A52F6DB7E012A09AC494902831607D12782AD3604AE3D23D5880E6EE0FA53A55FF6E67439B57E89AD8BE74A4D93CEC708BC44BE4A3237BEEEC20F18B3BB7D183B9E8D0D2DEFA086048F1C209C36E44C18F006D749DDE182EC944F65ABE28DFC4B2DDD362CAFE4B5D38439604208540BF9389D2245F141363DDDE724BB149F80A997381E43C88551E832F2296789EB86D6EDBDCDABD4AB4F3D19B617B1C83F76B2C2271AF080D9A2CA817119AC9C313CFC24736CB84007A1EE6BBA255F7E65ADDDBC16E965EB8597B17CF277377558FBB48A2446D082E6F5C9E38053AD96F9FDF9BF071137805202AFC6A1FF5769C240A7634225E6FB870D3AD760285CBA4B03105F0D6EA6F8F9240E062225D0C8F2B868BB7F2B4D935F6981A258F0796ED341D78755029D89D6DAA2BAA17F663EE031478EA4DA939ED06E908D4622D1DC55F7D915D7BF641DA22686781B4B15432CA6E71A87C0EB10B8B02A01E74203F9F96FD86858BAD682A463702AC6196A84F211ED7DB3513DD0CB1A7E1FF8CA645654F03F50E864AFA3B37D200125A4CC2D0EF687DEA29E00290C381CD8C49DBE9B04F90FBBBA1B0F7CC12C1A64E1A7
3F6FBA42415454018E5FFA84CBBF88DB7834D2C64266CB9770478E6AAFE7DFD5EAC2F99C7008ED1EE205E72F609350178DC20A93BFC8084E92228F9ED3D74E39BBE7FD1966E34DF7AE2EFA83B2AE3834C97F37D6E999D6CC8662C95759A4EF587A4726D7B928371839A6A63A2BE577153EB7E64C0D2FF457247DBECA16F20507AE23CA5C3608892395E5861BE8212E5CD2F7260610DBCA50893016EF12F7A301B268E9ED0D68AEBAA29580CF9C39F0A128C34A7D7F27A7D96DFBB0EF7FF351A205E6F204C1D08A2F6E20B10530D4CC2A104B15E34A304D44096E1787AFF547DFB2F0E6C01402282B04A33068755B78A53371655ABCCC70EE689F087B648F5518172D8941AA2809E2EADB4B227CB583E54DD2B37E2AAE8583C31355E0240A17E434942C3161C07E21A6151662018ACBC0C1A979A7D24598CE8466173FED7E5029114523A36841689D15720A7FBC09D963983B00A6D77134A1D4578DC50F2E26621EEDCFFAAC13F97DC7CEC67A8505EE5540505F91AAB415CEEC619B1D3C1A7B257841F38010A750FE621C3FD3738FEB290CF9DDE8FDF753B4247372BB4927F3A62557956040A1453D46D82845086B9677797FDE9DD548B1910751470A54B36A4ED0DBF63DF1BA90D5D7E22D56A584A0772E529B9CB6C989667D11BA46EE5921ED4113E685D40A2FA9114EF25C63BA0045DC18AEFC2B1CD4F1243A64E9D993F92E4FC3BE06E29D841A6B11A6328C5327A633446617DF4DB3812FCEE0B51FD6690E4B969D4D475F89629FA9E1B0E22D2C894A67198280974EBA160159590175A8ABBB19B76E8CF8A7FB97D443C3175B74688232662FB9C4BD1DCB62FA9661662E3836FDE2E6445D34E96BFE75F064B16984C5430CF311930B01C3AE942CD30B8AD57218C1FEEFE8D8592AFDF84443BE3AFA3DBF496AF1B783B3B608D2A8FDA25A2845BDE3C064CAF598D82AA94979D6F2C052545B0FE6FDCE0645107BC4903BC2E4F9220708D31441F13C45BDFAB0EBFD48F4A564F35EDFA1350A5524FCFBCA6CF95A6FC0196EFBA3D8E575A5D5E5204A56CA145792B6C1DA1DD75D581CB9A579EAD94D30DFECAA4ADB5F05026DBB6B305C2EBCAAF0F88A6433F0996287A341D984297D9FF0F00E3E95369E2071D8025C0B8EEBC5C8F5
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/KMELVB+Avenir-Heavy cguidfix
/F2.1/KMELVB+Avenir-Heavy renmfont
%RBIBeginFontSubset: UBKMFQ+Avenir-Medium
%!FontType1-1.0: UBKMFQ+Avenir-Medium 1.0000.1.0010
/FontInfo 1 dict dup begin
/FSType 4 def
end readonly def
14 dict begin
/FontName /UBKMFQ+Avenir-Medium def
/PaintType 0 def
/Encoding 256 array 0 1 255 {1 index exch/.notdef put} for
dup 33 /l put
dup 34 /i put
dup 35 /space put
dup 36 /e put
dup 37 /s put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[1000 -438 1 index div -409 2 index div 1373 3 index div 1213 5 -1 roll div]cvx def
/sfnts [<





00>] def
/CharStrings 7 dict dup begin
/.notdef 0 def
/space 1 def
/e 2 def
/i 3 def
/l 4 def
/s 5 def
/uniFE48 6 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontInfo 1 dict dup begin
/FSType 4 def
end readonly def
/FontType 1 def
/FontMatrix [ 0.001 0 0 0.001 0 0 ] readonly def
/FontBBox {-438 -409 1373 1213} readonly def
/UniqueID 4326480 def
currentdict end
currentfile eexec
54544758EC884CF30C3CD503CEDBFF3839C47C3C3333173232E3FDBFF439491DB843E1924E63AA7726BBB0485AB56D93D8C0906F647A47162891E73FFC2A9873C4B1EAC5EEBDFFC4D06084FBD84139DF4583C6E259D10699944D1068C9C45667DCCCFB9B7EA01B606435EDCBD273ABAC093D14085CCBAC149BD7382E842CFE0D7FE4FD2EF589A2471F6074A80A8B675C2F7A50D63AC1EF90D787BADD11633CB01CF6EE3B37AAF9078A69AC4740E9B6525D78BBD839551A1CB80DB8682FA5E87591BBD6EE8B946063A2A58D9CA3685AB305495DC5FB5747EB8A9A059C4976C0FE4EEAB1D56FF47F1E9664ED9F4A7DAB763AF92B2F6CF2FA7DEC24710E0B9096E30F772BA7FEA9BDBE496C42ED2CEB58F54E80BDF57CE7B4DB6CCFE7182F43BF93CCA0767AF95D62C5D2C3DC6AE1E6D139F51A2C63432117F1714C5566572EE9967A715420ABDCD1D7BD74F8450B89965FCC81C6ACA565C5F3CCF91D430D1F953E4F1A645300A98DD8C47CD64555F08F422340A85404EAE0D3229C4F9336B9470CACBD6BBF3395104750A915CC6EAAC197668267B8C62D2764C8CD69FD937CA3C924D997A0EDE7964BEB9EA2F92EF70C5E5DA0AA55675454E59AEC12A68086DDD95476477C46AE143377694529C58844212FC811560E27EEE2CF00BCB2841D4E2A5F3E00796201973F6D284AC32836A38BF7BF5AD47553F106A3BCF65F7C73B48871FA45E0143B0B2A15F91538CA97CA3844554AD5CCCFFD6C882AA318E615C9969873C05379D0C926375EE2807FCDCE2A72DC6528A774BBF35A996324AED09006D6804665F3D635C3A9664C9848A2470512B3C0E6A9BF26CDC0189D1085FFA561697F5D0048A7E71B065FDCD67CC1F77BA1177AEF418857751EEB7E583F0CE1E164803ACD0D588E7418B081137F9A50DE5E8401C47EE0268DFDC2C34175845B8E41168F4BB2548E0FA733AA9C215359FA54F7BBF858AE5CF3AD89A00DC1BAE38CCBABCE91D04CB22BC0186D9EB21D53488BBD75B29856BCCA8D703BF86ACA379B5399D10AFF7626691EC352B883BD07F7E9C2ACE0A8677D761D0E83F684590AF037538A8E2AFF8C5F3DBE61516E658898708C88E2003A6BEF98CDC9153CA268E2C0BE6C7FC66FECF6F57BF50A07D589565CA9F4E9BE211F8251AE6E67E70F3558A0BD6A8CCA50351E12D20BB9A1BF7F643B1DB57CF928C6D95CA03BBA1C012D2E87871413D9330EE825A9386D82AE37DF270500F11785D199B18C77A248FAE81CBECE4A68BFD24F02499F4FEDA8E36D3F00DAADCA021755DBC2949D49C8406798D6AF38E559214E3BD4211CDB7E15F94ACC3C616E4031D8EF01764F2F6C5467E950F41E1D6C9B9732AC58A3E372932844DC5C424B68578E6FA9A5084669EE4D6882759FE877DC69DF5F0D6E746113D7009F9E804367461A727A0878E536B34FCC
AC1ED4E9BC28D486D6CFE0A21F6F0A231BE3AC52BBC3F1F464A77B7A10564FD973E9BC4BF7ECE8EA2A79009678E44E495998E1C0AEA2A831CF683565E265096E68882CFC572D8F5F55B72C2A75DA51EF3C25961C59EB63DF2F003B1ED7B5860C27CFC48016450EDA6089C751F997890797144374F04AA07F9759C26F109B58C0E0AC7845D2231256403E970EC7E1D22BF22F33C9F319634473059AB1F0CB57760F17F2D6585601D2678B53C5CE3BBD88109FA0BD79ED848095892E56033F40BB6EC62A4DC339105D07B9D06E8DA8351517783B7750A87A2BEB4C9A106FF8D77638A46CEDC0ED11A06D9757444BDEC9952609687BD6804425C95FB8CB2A1FCED4D1BE22CDCA9F87563613064F7EE44B4651208BB40DC235F15DD7AF79FBAD01B6AA98D41B9AE36DBC190E5E0FBA5E6D6BCC97A93157A0369C4E084204AC13C422E4336D69837FC62DF1B13E182E296FA9B23F56260547F998B655CC5578886B3710A025FB0CB15EF47CB00F2B17955E2906037E2BEEBA9AE86C31CD0106A5EF1C0CDD9A092B193FF3D791416C3D073CFB429CF966B87629B01F362EF861FB35419482157E7009D0048DEF5D46E66B90ACE295D8EBE88C0CFA6CFA5C0626370B404C1C5079756049D2CF3CB1BF430735DB57CD50A411FAB2021D96AA615B9FB383B0E379592933A5520D05999CEFA4CB762B97D07F558249621235ACEAAA820DF7
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/UBKMFQ+Avenir-Medium cguidfix
/F3.1/UBKMFQ+Avenir-Medium renmfont
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
/Cs1 SC
1 1 1 sc
0.60000002 i
q
1770 306 2250 718 rc
2 0 0 -2 1770 1024 cm
/F1.1[ 270 0 0 -270 0 0]sf
54.900002 275 m
(!"#####!$%%)[ 70.200000 70.200000 79.920000 79.920000 79.920000 79.920000 79.920000 70.200000 154.980000 125.010000 0.000000 ] xS
Q
q
2742 778 202 80 rc
2732 868 m
2954 868 l
2954 768 l
2732 768 l
h
f
Q
q
2350 596 80 262 rc
2340 868 m
2440 868 l
2440 586 l
2340 586 l
h
f
Q
q
2480 474 80 382 rc
2470 866 m
2570 866 l
2570 464 l
2470 464 l
h
f
Q
q
2218 474 80 382 rc
2208 866 m
2308 866 l
2308 464 l
2208 464 l
h
f
Q
q
2742 474 80 252 rc
2732 736 m
2832 736 l
2832 464 l
2732 464 l
h
f
Q
q
2610 778 80 80 rc
2600 868 m
2700 868 l
2700 768 l
2600 768 l
h
f
Q
q
2614 476 80 252 rc
2604 738 m
2704 738 l
2704 466 l
2604 466 l
h
f
Q
q
3764.8142 841.08545 m
3789.072 841.08545 3811.8765 850.59857 3829.0291 867.87262 c
3872.9954 912.15057 l
3916.9617 867.87262 l
3934.114 850.59857 3956.9194 841.08545 3981.1765 841.08545 c
4005.4343 841.08545 4028.239 850.59924 4045.3914 867.87262 c
4062.5437 885.14667 4071.99 908.11365 4071.99 932.54272 c
4071.99 956.97247 4062.5437 979.93878 4045.3914 997.21283 c
4028.239 1014.4869 4005.4343 1024 3981.1765 1024 c
3956.9194 1024 3934.114 1014.4869 3916.9617 997.21283 c
3872.9954 952.93414 l
3829.0291 997.21216 l
3811.8765 1014.4862 3789.0713 1024 3764.8142 1024 c
3740.5564 1024 3717.7517 1014.4862 3700.5994 997.21216 c
3683.4463 979.93878 3674 956.9718 3674 932.54205 c
3674 908.11365 3683.4463 885.14667 3700.5986 867.87262 c
3717.7517 850.59857 3740.5564 841.08545 3764.8142 841.08545 c
h
3937.2102 976.82135 m
3948.9536 988.64819 3964.5688 995.16235 3981.1765 995.16235 c
3997.7854 995.16235 4013.3992 988.64886 4025.1428 976.82135 c
4036.887 964.99457 4043.3552 949.2688 4043.3552 932.54272 c
4043.3552 915.81665 4036.887 900.09222 4025.1428 888.26471 c
4013.3992 876.43793 3997.7849 869.92371 3981.1765 869.92371 c
3964.5681 869.92371 3948.9536 876.43793 3937.2102 888.26471 c
3893.2432 932.54272 l
3937.2102 976.82135 l
h
3720.8472 976.82135 m
3732.5908 988.64819 3748.2051 995.16235 3764.8135 995.16235 c
3781.4219 995.16235 3797.0361 988.64886 3808.7798 976.82135 c
3852.7468 932.54272 l
3808.7791 888.26404 l
3797.0356 876.43726 3781.4211 869.92371 3764.8127 869.92371 c
3748.2046 869.92371 3732.5894 876.43726 3720.8459 888.26404 c
3709.1023 900.09155 3702.6345 915.81665 3702.6345 932.54205 c
3702.6345 949.2688 3709.103 964.9939 3720.8472 976.82135 c
h
W
0 0 8192 2048 rc
3664 1034 m
4081.99 1034 l
4081.99 831.08545 l
3664 831.08545 l
h
f
Q
q
3982.5457 841.08545 m
3958.1172 841.08545 3935.1506 850.59857 3917.8774 867.87238 c
3874 911.7514 l
3830.1233 867.87238 l
3812.8501 850.5979 3789.8835 841.08545 3765.4551 841.08545 c
3741.0264 841.08545 3718.0605 850.59857 3700.7866 867.87238 c
3683.5129 885.14691 3674 908.11359 3674 932.54236 c
3674 956.97186 3683.5129 979.93921 3700.7859 997.21301 c
3718.0598 1014.4868 3741.0264 1024 3765.4543 1024 c
3789.8828 1024 3812.8486 1014.4868 3830.1226 997.21301 c
3874 953.33398 l
3917.8774 997.21301 l
3935.1514 1014.4868 3958.1172 1024 3982.5457 1024 c
4006.9744 1024 4029.9409 1014.4868 4047.2141 997.21301 c
4064.4871 979.93921 4074 956.97186 4074 932.54236 c
4074 908.11292 4064.4866 885.14557 4047.2141 867.87177 c
4029.9402 850.5979 4006.9736 841.08545 3982.5457 841.08545 c
h
3874 912.69983 m
3918.3516 868.34662 l
3935.498 851.19952 3958.2961 841.7561 3982.5457 841.7561 c
4006.7947 841.7561 4029.592 851.19952 4046.7397 868.34662 c
4063.8862 885.49365 4073.3293 908.29266 4073.3293 932.54303 c
4073.3293 956.79346 4063.8862 979.5918 4046.7397 996.7395 c
4029.5935 1013.8872 4006.7952 1023.33 3982.5457 1023.33 c
3958.2969 1023.33 3935.4993 1013.8865 3918.3516 996.7395 c
3874 952.38629 l
3829.6484 996.7395 l
3812.502 1013.8865 3789.7039 1023.33 3765.4543 1023.33 c
3741.2053 1023.33 3718.4072 1013.8865 3701.2603 996.7395 c
3684.1138 979.5918 3674.6707 956.79279 3674.6707 932.54236 c
3674.6707 908.29333 3684.1138 885.495 3701.2603 868.34662 c
3718.4072 851.19952 3741.2053 841.7561 3765.4543 841.7561 c
3789.7031 841.7561 3812.5012 851.19952 3829.6484 868.34662 c
3874 912.69983 l
h
3982.5457 869.81812 m
3965.7922 869.81812 3950.0408 876.34332 3938.1941 888.19049 c
3893.8418 932.5437 l
3938.1941 976.89691 l
3950.0408 988.74414 3965.7917 995.26868 3982.5457 995.26868 c
3999.2998 995.26868 4015.0505 988.74414 4026.8972 976.89691 c
4038.7446 965.04974 4045.2698 949.2984 4045.2698 932.5437 c
4045.2698 915.79034 4038.7446 900.03839 4026.8972 888.19049 c
4015.0505 876.34265 3999.2991 869.81812 3982.5457 869.81812 c
h
3894.7903 932.54303 m
3938.6682 888.664 l
3950.3889 876.94293 3965.9714 870.4881 3982.5457 870.4881 c
3999.1201 870.4881 4014.7024 876.94293 4026.4231 888.664 c
4038.1438 900.3858 4044.5991 915.96808 4044.5991 932.54303 c
4044.5991 949.11865 4038.1438 964.70166 4026.4231 976.42206 c
4014.7024 988.14252 3999.1201 994.59729 3982.5457 994.59729 c
3965.9714 994.59729 3950.3889 988.14252 3938.6682 976.42206 c
3894.7903 932.54303 l
h
3765.4543 869.81812 m
3748.7002 869.81812 3732.9487 876.34265 3721.1028 888.18982 c
3709.2566 900.03705 3702.7322 915.78833 3702.7322 932.54303 c
3702.7322 949.2984 3709.2566 965.05042 3721.1033 976.89691 c
3732.9502 988.74414 3748.7009 995.26868 3765.4551 995.26868 c
3782.209 995.26868 3797.9597 988.74414 3809.8066 976.89691 c
3854.1589 932.5437 l
3809.8066 888.18982 l
3797.9597 876.34198 3782.2083 869.81812 3765.4543 869.81812 c
h
3765.4551 994.59729 m
3748.8806 994.59729 3733.2976 988.14252 3721.5776 976.42206 c
3709.8574 964.70166 3703.4031 949.11865 3703.4031 932.54236 c
3703.4031 915.96741 3709.8574 900.38446 3721.5769 888.66333 c
3733.2969 876.94293 3748.8794 870.4881 3765.4543 870.4881 c
3782.0293 870.4881 3797.6118 876.94293 3809.3318 888.66333 c
3853.2097 932.54303 l
3809.3318 976.42206 l
3797.6123 988.14252 3782.0293 994.59729 3765.4551 994.59729 c
h
W
0 0 8192 2048 rc
3664 1034 m
4084 1034 l
4084 831.08545 l
3664 831.08545 l
h
f
Q
q
4118 1024 2250 718 rc
2 0 0 -2 4118 1742 cm
/F2.1[ 270 0 0 -270 0 0]sf
59.895 275 m
(!"#####!$%%)[ 70.470000 70.200000 79.920000 79.920000 79.920000 79.920000 79.920000 70.200000 154.980000 119.880000 0.000000 ] xS
Q
q
5090 1496 202 80 rc
5080 1586 m
5302 1586 l
5302 1486 l
5080 1486 l
h
f
Q
q
4698 1314 80 262 rc
4688 1586 m
4788 1586 l
4788 1304 l
4688 1304 l
h
f
Q
q
4828 1192 80 382 rc
4818 1584 m
4918 1584 l
4918 1182 l
4818 1182 l
h
f
Q
q
4566 1192 80 382 rc
4556 1584 m
4656 1584 l
4656 1182 l
4556 1182 l
h
f
Q
q
5090 1192 80 252 rc
5080 1454 m
5180 1454 l
5180 1182 l
5080 1182 l
h
f
Q
q
4958 1496 80 80 rc
4948 1586 m
5048 1586 l
5048 1486 l
4948 1486 l
h
f
Q
q
4962 1194 80 252 rc
4952 1456 m
5052 1456 l
5052 1184 l
4952 1184 l
h
f
Q
q
6112.814 1559.0854 m
6137.0718 1559.0854 6159.8765 1568.5985 6177.0288 1585.8726 c
6220.9951 1630.1506 l
6264.9614 1585.8726 l
6282.1143 1568.5985 6304.9194 1559.0854 6329.1763 1559.0854 c
6353.4341 1559.0854 6376.2388 1568.5992 6393.3911 1585.8726 c
6410.5439 1603.1466 6419.9897 1626.1136 6419.9897 1650.5427 c
6419.9897 1674.9725 6410.5439 1697.9388 6393.3911 1715.2128 c
6376.2388 1732.4868 6353.4341 1742 6329.1763 1742 c
6304.9194 1742 6282.1143 1732.4868 6264.9614 1715.2128 c
6220.9951 1670.9342 l
6177.0288 1715.2122 l
6159.8765 1732.4862 6137.0713 1742 6112.814 1742 c
6088.5562 1742 6065.752 1732.4862 6048.5991 1715.2122 c
6031.4463 1697.9388 6022 1674.9718 6022 1650.542 c
6022 1626.1136 6031.4463 1603.1466 6048.5986 1585.8726 c
6065.752 1568.5985 6088.5562 1559.0854 6112.814 1559.0854 c
h
6285.21 1694.8214 m
6296.9536 1706.6482 6312.5688 1713.1624 6329.1763 1713.1624 c
6345.7856 1713.1624 6361.3994 1706.6488 6373.1426 1694.8214 c
6384.8872 1682.9945 6391.3555 1667.2688 6391.3555 1650.5427 c
6391.3555 1633.8167 6384.8872 1618.0922 6373.1426 1606.2648 c
6361.3994 1594.438 6345.7847 1587.9237 6329.1763 1587.9237 c
6312.5684 1587.9237 6296.9536 1594.438 6285.21 1606.2648 c
6241.2432 1650.5427 l
6285.21 1694.8214 l
h
6068.8472 1694.8214 m
6080.5908 1706.6482 6096.2051 1713.1624 6112.8135 1713.1624 c
6129.4219 1713.1624 6145.0361 1706.6488 6156.7798 1694.8214 c
6200.7466 1650.5427 l
6156.7793 1606.264 l
6145.0356 1594.4373 6129.4214 1587.9237 6112.813 1587.9237 c
6096.2046 1587.9237 6080.5894 1594.4373 6068.8457 1606.264 c
6057.1025 1618.0916 6050.6348 1633.8167 6050.6348 1650.542 c
6050.6348 1667.2688 6057.103 1682.9939 6068.8472 1694.8214 c
h
W
0 0 8192 2048 rc
6012 1752 m
6429.9897 1752 l
6429.9897 1549.0854 l
6012 1549.0854 l
h
f
Q
q
6330.5459 1559.0854 m
6306.1172 1559.0854 6283.1504 1568.5986 6265.8774 1585.8724 c
6222 1629.7515 l
6178.123 1585.8724 l
6160.8501 1568.5979 6137.8833 1559.0854 6113.4551 1559.0854 c
6089.0264 1559.0854 6066.0605 1568.5986 6048.7866 1585.8724 c
6031.5127 1603.1469 6022 1626.1135 6022 1650.5424 c
6022 1674.9718 6031.5127 1697.9392 6048.7861 1715.213 c
6066.0601 1732.4868 6089.0264 1742 6113.4541 1742 c
6137.8828 1742 6160.8486 1732.4868 6178.1226 1715.213 c
6222 1671.334 l
6265.8774 1715.213 l
6283.1514 1732.4868 6306.1172 1742 6330.5459 1742 c
6354.9741 1742 6377.9409 1732.4868 6395.2139 1715.213 c
6412.4873 1697.9392 6422 1674.9718 6422 1650.5424 c
6422 1626.1129 6412.4863 1603.1455 6395.2139 1585.8717 c
6377.9399 1568.5979 6354.9736 1559.0854 6330.5459 1559.0854 c
h
6222 1630.6998 m
6266.3516 1586.3466 l
6283.498 1569.1996 6306.2964 1559.7561 6330.5459 1559.7561 c
6354.7944 1559.7561 6377.5923 1569.1996 6394.7397 1586.3466 c
6411.8862 1603.4937 6421.3291 1626.2926 6421.3291 1650.5431 c
6421.3291 1674.7935 6411.8862 1697.5918 6394.7397 1714.7395 c
6377.5933 1731.8872 6354.7954 1741.33 6330.5459 1741.33 c
6306.2969 1741.33 6283.4995 1731.8866 6266.3516 1714.7395 c
6222 1670.3864 l
6177.6484 1714.7395 l
6160.502 1731.8866 6137.7036 1741.33 6113.4541 1741.33 c
6089.2056 1741.33 6066.4072 1731.8866 6049.2603 1714.7395 c
6032.1138 1697.5918 6022.6709 1674.7927 6022.6709 1650.5424 c
6022.6709 1626.2933 6032.1138 1603.495 6049.2603 1586.3466 c
6066.4072 1569.1996 6089.2056 1559.7561 6113.4541 1559.7561 c
6137.7031 1559.7561 6160.5015 1569.1996 6177.6484 1586.3466 c
6222 1630.6998 l
h
6330.5459 1587.8181 m
6313.7925 1587.8181 6298.041 1594.3433 6286.1943 1606.1906 c
6241.8418 1650.5437 l
6286.1943 1694.897 l
6298.041 1706.7441 6313.7915 1713.2687 6330.5459 1713.2687 c
6347.2998 1713.2687 6363.0508 1706.7441 6374.8975 1694.897 c
6386.7446 1683.0497 6393.2695 1667.2985 6393.2695 1650.5437 c
6393.2695 1633.7904 6386.7446 1618.0383 6374.8975 1606.1906 c
6363.0508 1594.3427 6347.2993 1587.8181 6330.5459 1587.8181 c
h
6242.79 1650.5431 m
6286.6685 1606.6641 l
6298.3892 1594.9429 6313.9712 1588.4882 6330.5459 1588.4882 c
6347.1201 1588.4882 6362.7026 1594.9429 6374.4233 1606.6641 c
6386.144 1618.3857 6392.5991 1633.9681 6392.5991 1650.5431 c
6392.5991 1667.1187 6386.144 1682.7017 6374.4233 1694.4221 c
6362.7026 1706.1425 6347.1201 1712.5973 6330.5459 1712.5973 c
6313.9712 1712.5973 6298.3892 1706.1425 6286.6685 1694.4221 c
6242.79 1650.5431 l
h
6113.4541 1587.8181 m
6096.7002 1587.8181 6080.9487 1594.3427 6069.1025 1606.1898 c
6057.2568 1618.037 6050.7324 1633.7883 6050.7324 1650.5431 c
6050.7324 1667.2985 6057.2568 1683.0504 6069.1035 1694.897 c
6080.9502 1706.7441 6096.7007 1713.2687 6113.4551 1713.2687 c
6130.209 1713.2687 6145.96 1706.7441 6157.8066 1694.897 c
6202.1587 1650.5437 l
6157.8066 1606.1898 l
6145.96 1594.3419 6130.2085 1587.8181 6113.4541 1587.8181 c
h
6113.4551 1712.5973 m
6096.8809 1712.5973 6081.2974 1706.1425 6069.5776 1694.4221 c
6057.8574 1682.7017 6051.4028 1667.1187 6051.4028 1650.5424 c
6051.4028 1633.9674 6057.8574 1618.3844 6069.5767 1606.6633 c
6081.2969 1594.9429 6096.8794 1588.4882 6113.4541 1588.4882 c
6130.0293 1588.4882 6145.6118 1594.9429 6157.3315 1606.6633 c
6201.21 1650.5431 l
6157.3315 1694.4221 l
6145.6123 1706.1425 6130.0293 1712.5973 6113.4551 1712.5973 c
h
W
0 0 8192 2048 rc
6012 1752 m
6432 1752 l
6432 1549.0854 l
6012 1549.0854 l
h
f
Q
q
4118 306 1960 718 rc
2 0 0 -2 4118 1024 cm
/F3.1[ 270 0 0 -270 0 0]sf
10.21 275 m
(!"#####!$%%)[ 64.800000 64.800000 75.060000 75.060000 75.060000 75.060000 75.060000 64.800000 150.120000 119.880000 0.000000 ] xS
Q
q
4946 778 202 80 rc
4936 868 m
5158 868 l
5158 768 l
4936 768 l
h
f
Q
q
4554 596 80 262 rc
4544 868 m
4644 868 l
4644 586 l
4544 586 l
h
f
Q
q
4684 474 80 382 rc
4674 866 m
4774 866 l
4774 464 l
4674 464 l
h
f
Q
q
4422 474 80 382 rc
4412 866 m
4512 866 l
4512 464 l
4412 464 l
h
f
Q
q
4946 474 80 252 rc
4936 736 m
5036 736 l
5036 464 l
4936 464 l
h
f
Q
q
4814 778 80 80 rc
4804 868 m
4904 868 l
4904 768 l
4804 768 l
h
f
Q
q
4818 476 80 252 rc
4808 738 m
4908 738 l
4908 466 l
4808 466 l
h
f
Q
q
5968.814 841.08545 m
5993.0718 841.08545 6015.8765 850.59857 6033.0288 867.87262 c
6076.9951 912.15057 l
6120.9614 867.87262 l
6138.1143 850.59857 6160.9194 841.08545 6185.1763 841.08545 c
6209.4341 841.08545 6232.2388 850.59924 6249.3911 867.87262 c
6266.5439 885.14667 6275.9897 908.11365 6275.9897 932.54272 c
6275.9897 956.97247 6266.5439 979.93878 6249.3911 997.21283 c
6232.2388 1014.4869 6209.4341 1024 6185.1763 1024 c
6160.9194 1024 6138.1143 1014.4869 6120.9614 997.21283 c
6076.9951 952.93414 l
6033.0288 997.21216 l
6015.8765 1014.4862 5993.0713 1024 5968.814 1024 c
5944.5562 1024 5921.752 1014.4862 5904.5991 997.21216 c
5887.4463 979.93878 5878 956.9718 5878 932.54205 c
5878 908.11365 5887.4463 885.14667 5904.5986 867.87262 c
5921.752 850.59857 5944.5562 841.08545 5968.814 841.08545 c
h
6141.21 976.82135 m
6152.9536 988.64819 6168.5688 995.16235 6185.1763 995.16235 c
6201.7856 995.16235 6217.3994 988.64886 6229.1426 976.82135 c
6240.8872 964.99457 6247.3555 949.2688 6247.3555 932.54272 c
6247.3555 915.81665 6240.8872 900.09222 6229.1426 888.26471 c
6217.3994 876.43793 6201.7847 869.92371 6185.1763 869.92371 c
6168.5684 869.92371 6152.9536 876.43793 6141.21 888.26471 c
6097.2432 932.54272 l
6141.21 976.82135 l
h
5924.8472 976.82135 m
5936.5908 988.64819 5952.2051 995.16235 5968.8135 995.16235 c
5985.4219 995.16235 6001.0361 988.64886 6012.7798 976.82135 c
6056.7466 932.54272 l
6012.7793 888.26404 l
6001.0356 876.43726 5985.4214 869.92371 5968.813 869.92371 c
5952.2046 869.92371 5936.5894 876.43726 5924.8457 888.26404 c
5913.1025 900.09155 5906.6348 915.81665 5906.6348 932.54205 c
5906.6348 949.2688 5913.103 964.9939 5924.8472 976.82135 c
h
W
0 0 8192 2048 rc
5868 1034 m
6285.9897 1034 l
6285.9897 831.08545 l
5868 831.08545 l
h
f
Q
q
6186.5459 841.08545 m
6162.1172 841.08545 6139.1504 850.59857 6121.8774 867.87238 c
6078 911.7514 l
6034.123 867.87238 l
6016.8501 850.5979 5993.8833 841.08545 5969.4551 841.08545 c
5945.0264 841.08545 5922.0605 850.59857 5904.7866 867.87238 c
5887.5127 885.14691 5878 908.11359 5878 932.54236 c
5878 956.97186 5887.5127 979.93921 5904.7861 997.21301 c
5922.0601 1014.4868 5945.0264 1024 5969.4541 1024 c
5993.8828 1024 6016.8486 1014.4868 6034.1226 997.21301 c
6078 953.33398 l
6121.8774 997.21301 l
6139.1514 1014.4868 6162.1172 1024 6186.5459 1024 c
6210.9741 1024 6233.9409 1014.4868 6251.2139 997.21301 c
6268.4873 979.93921 6278 956.97186 6278 932.54236 c
6278 908.11292 6268.4863 885.14557 6251.2139 867.87177 c
6233.9399 850.5979 6210.9736 841.08545 6186.5459 841.08545 c
h
6078 912.69983 m
6122.3516 868.34662 l
6139.498 851.19952 6162.2964 841.7561 6186.5459 841.7561 c
6210.7944 841.7561 6233.5923 851.19952 6250.7397 868.34662 c
6267.8862 885.49365 6277.3291 908.29266 6277.3291 932.54303 c
6277.3291 956.79346 6267.8862 979.5918 6250.7397 996.7395 c
6233.5933 1013.8872 6210.7954 1023.33 6186.5459 1023.33 c
6162.2969 1023.33 6139.4995 1013.8865 6122.3516 996.7395 c
6078 952.38629 l
6033.6484 996.7395 l
6016.502 1013.8865 5993.7036 1023.33 5969.4541 1023.33 c
5945.2056 1023.33 5922.4072 1013.8865 5905.2603 996.7395 c
5888.1138 979.5918 5878.6709 956.79279 5878.6709 932.54236 c
5878.6709 908.29333 5888.1138 885.495 5905.2603 868.34662 c
5922.4072 851.19952 5945.2056 841.7561 5969.4541 841.7561 c
5993.7031 841.7561 6016.5015 851.19952 6033.6484 868.34662 c
6078 912.69983 l
h
6186.5459 869.81812 m
6169.7925 869.81812 6154.041 876.34332 6142.1943 888.19049 c
6097.8418 932.5437 l
6142.1943 976.89691 l
6154.041 988.74414 6169.7915 995.26868 6186.5459 995.26868 c
6203.2998 995.26868 6219.0508 988.74414 6230.8975 976.89691 c
6242.7446 965.04974 6249.2695 949.2984 6249.2695 932.5437 c
6249.2695 915.79034 6242.7446 900.03839 6230.8975 888.19049 c
6219.0508 876.34265 6203.2993 869.81812 6186.5459 869.81812 c
h
6098.79 932.54303 m
6142.6685 888.664 l
6154.3892 876.94293 6169.9712 870.4881 6186.5459 870.4881 c
6203.1201 870.4881 6218.7026 876.94293 6230.4233 888.664 c
6242.144 900.3858 6248.5991 915.96808 6248.5991 932.54303 c
6248.5991 949.11865 6242.144 964.70166 6230.4233 976.42206 c
6218.7026 988.14252 6203.1201 994.59729 6186.5459 994.59729 c
6169.9712 994.59729 6154.3892 988.14252 6142.6685 976.42206 c
6098.79 932.54303 l
h
5969.4541 869.81812 m
5952.7002 869.81812 5936.9487 876.34265 5925.1025 888.18982 c
5913.2568 900.03705 5906.7324 915.78833 5906.7324 932.54303 c
5906.7324 949.2984 5913.2568 965.05042 5925.1035 976.89691 c
5936.9502 988.74414 5952.7007 995.26868 5969.4551 995.26868 c
5986.209 995.26868 6001.96 988.74414 6013.8066 976.89691 c
6058.1587 932.5437 l
6013.8066 888.18982 l
6001.96 876.34198 5986.2085 869.81812 5969.4541 869.81812 c
h
5969.4551 994.59729 m
5952.8809 994.59729 5937.2974 988.14252 5925.5776 976.42206 c
5913.8574 964.70166 5907.4028 949.11865 5907.4028 932.54236 c
5907.4028 915.96741 5913.8574 900.38446 5925.5767 888.66333 c
5937.2969 876.94293 5952.8794 870.4881 5969.4541 870.4881 c
5986.0293 870.4881 6001.6118 876.94293 6013.3315 888.66333 c
6057.21 932.54303 l
6013.3315 976.42206 l
6001.6123 988.14252 5986.0293 994.59729 5969.4551 994.59729 c
h
W
0 0 8192 2048 rc
5868 1034 m
6288 1034 l
6288 831.08545 l
5868 831.08545 l
h
f
Q
q
1770 1024 2296 718 rc
2 0 0 -2 1770 1742 cm
/F2.1[ 270 0 0 -270 0 0]sf
36.564999 275 m
(&"#####!$%%)[ 140.130000 70.200000 79.920000 79.920000 79.920000 79.920000 79.920000 70.200000 154.980000 119.880000 0.000000 ] xS
Q
q
2828.1211 1496 195.87878 80 rc
2818.1211 1586 m
3034 1586 l
3034 1486 l
2818.1211 1486 l
h
f
Q
q
2448 1314 77.57576 262 rc
2438 1586 m
2535.5757 1586 l
2535.5757 1304 l
2438 1304 l
h
f
Q
q
2574.0605 1192 77.57576 382 rc
2564.0605 1584 m
2661.6365 1584 l
2661.6365 1182 l
2564.0605 1182 l
h
f
Q
q
2320 1192 77.57576 382 rc
2310 1584 m
2407.5757 1584 l
2407.5757 1182 l
2310 1182 l
h
f
Q
q
2828.1211 1192 77.57576 252 rc
2818.1211 1454 m
2915.697 1454 l
2915.697 1182 l
2818.1211 1182 l
h
f
Q
q
2700.1211 1496 77.57576 80 rc
2690.1211 1586 m
2787.697 1586 l
2787.697 1486 l
2690.1211 1486 l
h
f
Q
q
2704 1194 77.57576 252 rc
2694 1456 m
2791.5757 1456 l
2791.5757 1184 l
2694 1184 l
h
f
Q
q
3818.0898 1560 m
3841.6199 1560 3863.7402 1569.4656 3880.3782 1586.6532 c
3923.0254 1630.7098 l
3965.6729 1586.6532 l
3982.3105 1569.4656 4004.4316 1560 4027.9612 1560 c
4051.4912 1560 4073.6118 1569.4662 4090.2495 1586.6532 c
4106.8877 1603.8409 4116.0503 1626.6931 4116.0503 1651 c
4116.0503 1675.3076 4106.8877 1698.1591 4090.2495 1715.3468 c
4073.6118 1732.5344 4051.4912 1742 4027.9612 1742 c
4004.4316 1742 3982.3105 1732.5344 3965.6729 1715.3468 c
3923.0254 1671.2896 l
3880.3782 1715.3461 l
3863.7402 1732.5338 3841.6191 1742 3818.0898 1742 c
3794.5596 1742 3772.4392 1732.5338 3755.8013 1715.3461 c
3739.1628 1698.1591 3730 1675.3069 3730 1650.9994 c
3730 1626.6931 3739.1628 1603.8409 3755.8005 1586.6532 c
3772.4392 1569.4656 3794.5596 1560 3818.0898 1560 c
h
3985.314 1695.0573 m
3996.7051 1706.825 4011.8518 1713.3065 4027.9612 1713.3065 c
4044.072 1713.3065 4059.2173 1706.8256 4070.6084 1695.0573 c
4082.0002 1683.2896 4088.2747 1667.6425 4088.2747 1651 c
4088.2747 1634.3575 4082.0002 1618.7118 4070.6084 1606.9434 c
4059.2173 1595.1758 4044.0713 1588.6941 4027.9612 1588.6941 c
4011.8511 1588.6941 3996.7051 1595.1758 3985.314 1606.9434 c
3942.666 1651 l
3985.314 1695.0573 l
h
3775.4419 1695.0573 m
3786.833 1706.825 3801.979 1713.3065 3818.0891 1713.3065 c
3834.1992 1713.3065 3849.3452 1706.8256 3860.7363 1695.0573 c
3903.3843 1651 l
3860.7358 1606.9427 l
3849.3445 1595.175 3834.1985 1588.6941 3818.0884 1588.6941 c
3801.9783 1588.6941 3786.8318 1595.175 3775.4404 1606.9427 c
3764.0493 1618.7111 3757.7756 1634.3575 3757.7756 1650.9994 c
3757.7756 1667.6425 3764.0498 1683.2889 3775.4419 1695.0573 c
h
W
0 0 8192 2048 rc
3720 1752 m
4126.0503 1752 l
4126.0503 1550 l
3720 1550 l
h
f
Q
q
4029.2893 1560 m
4005.5935 1560 3983.3162 1569.4656 3966.561 1586.6531 c
3924 1630.3126 l
3881.4395 1586.6531 l
3864.6846 1569.465 3842.407 1560 3818.7114 1560 c
3795.0156 1560 3772.7388 1569.4656 3755.9832 1586.6531 c
3739.2275 1603.8412 3730 1626.693 3730 1650.9996 c
3730 1675.307 3739.2275 1698.1595 3755.9824 1715.3469 c
3772.738 1732.5344 3795.0156 1742 3818.7107 1742 c
3842.4065 1742 3864.6833 1732.5344 3881.439 1715.3469 c
3924 1671.6874 l
3966.561 1715.3469 l
3983.3167 1732.5344 4005.5935 1742 4029.2893 1742 c
4052.9851 1742 4075.2627 1732.5344 4092.0176 1715.3469 c
4108.7725 1698.1595 4118 1675.307 4118 1650.9996 c
4118 1626.6924 4108.772 1603.8398 4092.0176 1586.6523 c
4075.262 1569.465 4052.9844 1560 4029.2893 1560 c
h
3924 1631.2563 m
3967.021 1587.1249 l
3983.6531 1570.0636 4005.7673 1560.6674 4029.2893 1560.6674 c
4052.8108 1560.6674 4074.9243 1570.0636 4091.5576 1587.1249 c
4108.1895 1604.1862 4117.3496 1626.8712 4117.3496 1651.0004 c
4117.3496 1675.1295 4108.1895 1697.8138 4091.5576 1714.8759 c
4074.9255 1731.9377 4052.8113 1741.3334 4029.2893 1741.3334 c
4005.7681 1741.3334 3983.6543 1731.9371 3967.021 1714.8759 c
3924 1670.7444 l
3880.979 1714.8759 l
3864.3469 1731.9371 3842.2327 1741.3334 3818.7107 1741.3334 c
3795.1892 1741.3334 3773.075 1731.9371 3756.4424 1714.8759 c
3739.8103 1697.8138 3730.6506 1675.1288 3730.6506 1650.9996 c
3730.6506 1626.8718 3739.8103 1604.1875 3756.4424 1587.1249 c
3773.075 1570.0636 3795.1892 1560.6674 3818.7107 1560.6674 c
3842.2319 1560.6674 3864.3462 1570.0636 3880.979 1587.1249 c
3924 1631.2563 l
h
4029.2893 1588.589 m
4013.0386 1588.589 3997.7598 1595.0815 3986.2683 1606.8695 c
3943.2466 1651.001 l
3986.2683 1695.1324 l
3997.7598 1706.9204 4013.0378 1713.4124 4029.2893 1713.4124 c
4045.5408 1713.4124 4060.8191 1706.9204 4072.3103 1695.1324 c
4083.8025 1683.3445 4090.1316 1667.6719 4090.1316 1651.001 c
4090.1316 1634.3314 4083.8025 1618.6582 4072.3103 1606.8695 c
4060.8191 1595.0809 4045.54 1588.589 4029.2893 1588.589 c
h
3944.1665 1651.0004 m
3986.7283 1607.3407 l
3998.0974 1595.6782 4013.2122 1589.2557 4029.2893 1589.2557 c
4045.3665 1589.2557 4060.4814 1595.6782 4071.8503 1607.3407 c
4083.2195 1619.0039 4089.481 1634.5083 4089.481 1651.0004 c
4089.481 1667.493 4083.2195 1682.9982 4071.8503 1694.6599 c
4060.4814 1706.3218 4045.3665 1712.7443 4029.2893 1712.7443 c
4013.2122 1712.7443 3998.0974 1706.3218 3986.7283 1694.6599 c
3944.1665 1651.0004 l
h
3818.7107 1588.589 m
3802.4592 1588.589 3787.1804 1595.0809 3775.6897 1606.8689 c
3764.199 1618.6569 3757.8704 1634.3295 3757.8704 1651.0004 c
3757.8704 1667.6719 3764.199 1683.3451 3775.6902 1695.1324 c
3787.1816 1706.9204 3802.46 1713.4124 3818.7114 1713.4124 c
3834.9626 1713.4124 3850.241 1706.9204 3861.7324 1695.1324 c
3904.7542 1651.001 l
3861.7324 1606.8689 l
3850.241 1595.0802 3834.9622 1588.589 3818.7107 1588.589 c
h
3818.7114 1712.7443 m
3802.6343 1712.7443 3787.5186 1706.3218 3776.1501 1694.6599 c
3764.7817 1682.9982 3758.521 1667.493 3758.521 1650.9996 c
3758.521 1634.5076 3764.7817 1619.0026 3776.1497 1607.3401 c
3787.5181 1595.6782 3802.6328 1589.2557 3818.7107 1589.2557 c
3834.7883 1589.2557 3849.9033 1595.6782 3861.2717 1607.3401 c
3903.8335 1651.0004 l
3861.2717 1694.6599 l
3849.9041 1706.3218 3834.7883 1712.7443 3818.7114 1712.7443 c
h
W
0 0 8192 2048 rc
3720 1752 m
4128 1752 l
4128 1550 l
3720 1550 l
h
f
ep
end
